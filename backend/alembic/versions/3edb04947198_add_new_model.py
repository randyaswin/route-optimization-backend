"""add new model

Revision ID: 3edb04947198
Revises: 0812d97efaa7
Create Date: 2022-12-22 15:10:55.617436

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import fastapi_users_db_sqlalchemy
import geoalchemy2

# revision identifiers, used by Alembic.
revision = "3edb04947198"
down_revision = "0812d97efaa7"
hub_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "vrp_constraint",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), nullable=False),
        sa.Column("unit", sa.VARCHAR(length=50), nullable=False),
        sa.Column("hub_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True
        ),
        sa.ForeignKeyConstraint(["hub_id"], ["vrp_hub.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "vrp_tag",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), nullable=False),
        sa.Column("hub_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True
        ),
        sa.ForeignKeyConstraint(["hub_id"], ["vrp_hub.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "vrp_tag_applies_to",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("tag_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("vehicle_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("visit_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("hub_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True
        ),
        sa.ForeignKeyConstraint(["hub_id"], ["vrp_hub.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["tag_id"], ["vrp_tag.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["vehicle_id"], ["vrp_vehicle.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["visit_id"], ["vrp_visit.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(
        op.f("ix_vrp_tag_applies_to_hub_id"),
        "vrp_tag_applies_to",
        ["hub_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_vrp_tag_applies_to_tag_id"),
        "vrp_tag_applies_to",
        ["tag_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_vrp_tag_applies_to_vehicle_id"),
        "vrp_tag_applies_to",
        ["vehicle_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_vrp_tag_applies_to_visit_id"),
        "vrp_tag_applies_to",
        ["visit_id"],
        unique=False,
    )
    op.create_table(
        "vrp_vehicle_break",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("hub_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("vehicle_id", sa.INTEGER(), autoincrement=True, nullable=True),
        sa.Column("start", postgresql.TIME(), nullable=False),
        sa.Column("end", postgresql.TIME(), nullable=False),
        sa.Column("service_time", sa.NUMERIC(precision=10, scale=1), nullable=True),
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True
        ),
        sa.ForeignKeyConstraint(["hub_id"], ["vrp_hub.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["vehicle_id"], ["vrp_vehicle.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "vrp_vehicle_capacity",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("constraint_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("vehicle_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("value", sa.INTEGER(), nullable=False),
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["constraint_id"], ["vrp_constraint.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["vehicle_id"], ["vrp_vehicle.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(
        op.f("ix_vrp_vehicle_capacity_constraint_id"),
        "vrp_vehicle_capacity",
        ["constraint_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_vrp_vehicle_capacity_vehicle_id"),
        "vrp_vehicle_capacity",
        ["vehicle_id"],
        unique=False,
    )
    op.create_table(
        "vrp_visit_demand",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("constraint_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("visit_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("value", sa.INTEGER(), nullable=False),
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["constraint_id"], ["vrp_constraint.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(["visit_id"], ["vrp_visit.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(
        op.f("ix_vrp_visit_demand_constraint_id"),
        "vrp_visit_demand",
        ["constraint_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_vrp_visit_demand_visit_id"),
        "vrp_visit_demand",
        ["visit_id"],
        unique=False,
    )
    op.create_unique_constraint(None, "vrp_data", ["id"])
    op.drop_index("idx_vrp_hub_geom", table_name="vrp_hub")
    op.create_unique_constraint(None, "vrp_hub", ["id"])
    op.drop_index("idx_vrp_visit_geom", table_name="vrp_visit")
    op.create_unique_constraint(None, "vrp_visit", ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "vrp_visit", type_="unique")
    op.create_index("idx_vrp_visit_geom", "vrp_visit", ["geom"], unique=False)
    op.drop_constraint(None, "vrp_hub", type_="unique")
    op.create_index("idx_vrp_hub_geom", "vrp_hub", ["geom"], unique=False)
    op.drop_constraint(None, "vrp_data", type_="unique")
    op.create_table(
        "spatial_ref_sys",
        sa.Column("srid", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "auth_name", sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
        sa.Column("auth_srid", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "srtext", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.Column(
            "proj4text", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            "(srid > 0) AND (srid <= 998999)", name="spatial_ref_sys_srid_check"
        ),
        sa.PrimaryKeyConstraint("srid", name="spatial_ref_sys_pkey"),
    )
    op.drop_index(op.f("ix_vrp_visit_demand_visit_id"), table_name="vrp_visit_demand")
    op.drop_index(
        op.f("ix_vrp_visit_demand_constraint_id"), table_name="vrp_visit_demand"
    )
    op.drop_table("vrp_visit_demand")
    op.drop_index(
        op.f("ix_vrp_vehicle_capacity_vehicle_id"), table_name="vrp_vehicle_capacity"
    )
    op.drop_index(
        op.f("ix_vrp_vehicle_capacity_constraint_id"), table_name="vrp_vehicle_capacity"
    )
    op.drop_table("vrp_vehicle_capacity")
    op.drop_table("vrp_vehicle_break")
    op.drop_index(
        op.f("ix_vrp_tag_applies_to_visit_id"), table_name="vrp_tag_applies_to"
    )
    op.drop_index(
        op.f("ix_vrp_tag_applies_to_vehicle_id"), table_name="vrp_tag_applies_to"
    )
    op.drop_index(op.f("ix_vrp_tag_applies_to_tag_id"), table_name="vrp_tag_applies_to")
    op.drop_index(op.f("ix_vrp_tag_applies_to_hub_id"), table_name="vrp_tag_applies_to")
    op.drop_table("vrp_tag_applies_to")
    op.drop_table("vrp_tag")
    op.drop_table("vrp_constraint")
    # ### end Alembic commands ###
